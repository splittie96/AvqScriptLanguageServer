/*
 * generated by Xtext 2.12.0
 */
package org.xtext.avqscript.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.avqscript.avqScript.Body
import org.xtext.avqscript.avqScript.FunctionDeclaration
import org.xtext.avqscript.avqScript.ScriptPackage
import org.xtext.avqscript.avqScript.VariableDeclaration
import org.xtext.avqscript.services.AvqScriptGrammarAccess
import org.xtext.avqscript.avqScript.AvqScriptPackage

class AvqScriptFormatter extends AbstractFormatter2 {
	
	@Inject extension AvqScriptGrammarAccess

	def dispatch void format(ScriptPackage scriptPackage, extension IFormattableDocument document) {
		scriptPackage.regionFor.feature(AvqScriptPackage.Literals.SCRIPT_PACKAGE__NAME).append[newLine indent]
		for (VariableDeclaration variableDeclaration : scriptPackage.getGlobalVars()) {
			variableDeclaration.format;
		}
		scriptPackage.getBody.format;
	}

	def dispatch void format(Body body, extension IFormattableDocument document) {
		for (FunctionDeclaration functionDeclaration : body.getFunctions()) {
			functionDeclaration.format;
		}
	}
	
	def dispatch void format(FunctionDeclaration body, extension IFormattableDocument document) {
		for (VariableDeclaration variableDeclaration : body.localVars) {
			variableDeclaration.format;
		}
	}
	
	def dispatch void format(VariableDeclaration body, extension IFormattableDocument document) {
		body.regionForEObject.nextSemanticRegion.prepend[newLine]
	}
}
