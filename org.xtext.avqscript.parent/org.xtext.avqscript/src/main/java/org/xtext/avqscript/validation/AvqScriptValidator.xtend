/*
 * generated by Xtext 2.12.0
 */
package org.xtext.avqscript.validation

import org.xtext.avqscript.avqScript.ScriptPackage
import org.eclipse.xtext.validation.Check
import org.xtext.avqscript.avqScript.AvqScriptPackage
import org.xtext.avqscript.avqScript.VariableDeclaration
import org.xtext.avqscript.avqScript.Types
import java.util.regex.Pattern
import org.xtext.avqscript.avqScript.FeatureCall

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class AvqScriptValidator extends AbstractAvqScriptValidator {
	
	private val acceptableValuesMap = #{
		Types.NUMBER -> Pattern.compile("[0-9]*"),
		Types.BOOLEAN -> Pattern.compile("(true|false)"),
		Types.TEXT -> Pattern.compile(".*")
	}
	
	@Check
	def checkEndNameMatches(ScriptPackage script){
		if(!script.name.equals(script.endName)){
			error('''End name should match package name «script.name»''', AvqScriptPackage.Literals.SCRIPT_PACKAGE__END_NAME)
		}
	}
	
	@Check
	def typeCheckOnVariables(VariableDeclaration decl){
		val defaultVal = decl.^default
		if(defaultVal !== null && !acceptableValuesMap.get(decl.type)?.matcher(defaultVal).matches){
			error('''Incorrect default value type. «decl.type.literal» expected''', decl, AvqScriptPackage.Literals.VARIABLE_DECLARATION__DEFAULT)
		}
	}
	
	@Check
	def typeCheckOnParams(FeatureCall call){
		
	}

}
